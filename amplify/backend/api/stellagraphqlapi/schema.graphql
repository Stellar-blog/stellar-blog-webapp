type Space @model
  @key(name: "spaceByUserId", fields: ["userId"], queryField: "spaceByUserId")
  @auth(rules: [
    { allow: owner, ownerField: "username" },
    { allow: public, operations: [read] },
    { allow: public, provider: apiKey },
  ]) {
  id: ID!
  username: String
  userId: ID!
  defaultProfile: String
  profileKey: String
  profileSize: String
  backgroundKey: String
  backgroundSize: String
  userDetails: String
  language: Language
  preference: String
  posts: [Post] @connection(keyName: "postsByUserId", fields: ["userId"])
  likes: [Like] @connection(keyName: "likeByUserId", fields: ["userId"])
  following: [Follower] @connection(keyName: "followingByUserId", fields: ["userId"])
  follower: [Follower] @connection(keyName: "followerByUserId", fields: ["userId"])
}

enum Language {
  EN,
  FR,
  KR
}

type Follower @model
  @key(name: "followingByUserId", fields: ["userId", "createdAt"], queryField: "followingByUserId")
  @key(name: "followerByUserId", fields: ["followingId", "createdAt"], queryField: "followerByUserId")
  @auth(rules: [
    { allow: owner, ownerField: "username" },
    { allow: public, operations: [read] },
    { allow: public, provider: apiKey },
  ]) {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  username: String
  userId: ID!
  followingId: ID!
  followingSpaceId: ID!
  followingUserSpace: Space @connection(fields:["followingSpaceId"])
}

type Like @model
  @key(name: "likeByPostId", fields: ["postId", "createdAt"], queryField: "likeByPostId")
  @key(name: "likeByUserId", fields: ["userId", "createdAt"], queryField: "likeByUserId")
  @auth(rules: [
    { allow: owner, ownerField: "username" },
    { allow: public, operations: [read] },
    { allow: public, provider: apiKey },
  ]) {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  postId: ID!
  username: String
  userId: ID!
  post: Post @connection(fields: ["postId"])
}

type Post @model
  @key(name: "postsByStatus", fields: ["status", "createdAt"], queryField: "postsByStatus")
  @key(name: "postsByUserId", fields: ["userId", "createdAt"], queryField: "postsByUserId")
  @auth(rules: [
    { allow: owner, ownerField: "username" },
    { allow: public, operations: [read] },
    { allow: public, provider: apiKey },
  ])
  @searchable {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  username: String
  userId: ID!
  userSpaceId: ID!
  title: String!
  content: String
  hashtags: [String]
  comments: [Comment] @connection(keyName: "commentsByPostId", fields: ["id"])
  postImages: [PostImage] @connection(keyName: "postImagesByPostId", fields: ["id"])
  likes: [Like] @connection(keyName: "likeByPostId", fields: ["id"])
  status: PostStatus!
}

enum PostStatus {
  PUBLIC
  PRIVATE
  DRAFT
  ERROR
  HOLD
}

type PostImage @model
  @key(name: "postImagesByPostId", fields: ["postId", "createdAt"], queryField: "postImagesByPostId")
  @auth(rules: [
    { allow: owner, ownerField: "username" },
    { allow: public, operations: [read] },
    { allow: public, provider: apiKey },
  ]) {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  postId: ID!
  username: String
  userId: ID!
  desktopKey: String
  mobileKey: String
  thumbnailKey: String
  size: String
  metadata: String
}
 
type Comment @model
  @key(name: "commentsByPostId", fields: ["postId", "createdAt"], queryField: "commentsByPostId")
  @auth(rules: [
    { allow: owner, ownerField: "username" },
    { allow: public, operations: [read] },
    { allow: public, provider: apiKey },
  ]) {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  postId: ID!
  username: String
  userId: ID!
  message: String!
}